{
	"info": {
		"_postman_id": "9d334c79-6930-464f-8940-50b4425a0551",
		"name": "pAInt API - Paint Recommendation System Copy",
		"description": "Complete API collection for testing the pAInt paint recommendation system with conversation persistence and image simulation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43334436"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response",
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('token_type');",
									"    pm.expect(response).to.have.property('user');",
									"});",
									"",
									"// Extract and save token automatically",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    // Save to both collection and environment variables",
									"    pm.collectionVariables.set('access_token', response.access_token);",
									"    pm.environment.set('access_token', response.access_token);",
									"    ",
									"    pm.collectionVariables.set('user_id', response.user.id);",
									"    pm.environment.set('user_id', response.user.id);",
									"    ",
									"    pm.collectionVariables.set('username', response.user.username);",
									"    pm.environment.set('username', response.user.username);",
									"    ",
									"    console.log('‚úÖ Token saved successfully!');",
									"    console.log('üîë Token:', response.access_token.substring(0, 20) + '...');",
									"    console.log('üë§ User ID:', response.user.id);",
									"    console.log('üè∑Ô∏è Username:', response.user.username);",
									"} else {",
									"    console.log('‚ùå Login failed - Token not saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{api_base_url}}/auth/login",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with admin credentials to get JWT token. Token is automatically saved for other requests."
					},
					"response": []
				},
				{
					"name": "Login - Demo User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response",
									"pm.test('Demo login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extract and save token automatically",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('access_token', response.access_token);",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.collectionVariables.set('user_id', response.user.id);",
									"    pm.environment.set('user_id', response.user.id);",
									"    console.log('‚úÖ Demo user token saved!');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"demo_user\",\n  \"password\": \"demo123\"\n}"
						},
						"url": {
							"raw": "{{api_base_url}}/auth/login",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with demo user credentials"
					},
					"response": []
				},
				{
					"name": "Test Token Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token is valid', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('email');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Token is valid for user:', response.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base_url}}/auth/me",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Test if the saved token is working correctly by getting current user info"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for login and token validation"
		},
		{
			"name": "AI Recommendations",
			"item": [
				{
					"name": "New Conversation - Bedroom Paint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Recommendation successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('response');",
									"    pm.expect(response).to.have.property('session_uuid');",
									"});",
									"",
									"// Save session UUID for follow-up messages",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('session_uuid', response.session_uuid);",
									"    pm.environment.set('current_session_uuid', response.session_uuid);",
									"    console.log('üí¨ Session UUID saved:', response.session_uuid);",
									"    console.log('ü§ñ AI Response:', response.response.substring(0, 100) + '...');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Voc√™ tem alguma op√ß√£o premium para quarto?\",\n  \"session_uuid\": null\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Start a new conversation asking for bedroom paint recommendations. Uses automatic session detection."
					},
					"response": []
				},
				{
					"name": "Follow-up - Premium Option Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Follow-up successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üîÑ Follow-up response:', response.response.substring(0, 100) + '...');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Essa verde, me d√™ detalhes!\",\n  \"session_uuid\": \"{{session_uuid}}\"\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Follow-up question about premium paint option using the same session"
					},
					"response": []
				},
				{
					"name": "Kitchen Paint Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save as different session for kitchen",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('kitchen_session_uuid', response.session_uuid);",
									"    console.log('üç≥ Kitchen session UUID:', response.session_uuid);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Preciso de tinta para a cozinha. Que seja lav√°vel e para ambiente interno.\",\n  \"session_uuid\": null\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Start a new conversation for kitchen paint (different session)"
					},
					"response": []
				},
				{
					"name": "External Paint Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Quero pintar a fachada da minha casa. Preciso de tinta para √°rea externa, resistente ao sol e chuva.\",\n  \"session_uuid\": null\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Request for external paint recommendations"
					},
					"response": []
				},
				{
					"name": "Paint Simulation with Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Display input image before sending the request",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"if (requestBody.image_base64) {",
									"    let inputTemplate = `",
									"    <div style='text-align: center; font-family: Arial;'>",
									"        <h2>üì§ Input Image for Paint Simulation</h2>",
									"        <p><strong>Message:</strong> {{message}}</p>",
									"        <div style='border: 2px solid #007acc; padding: 10px; margin: 20px 0; background: #f0f8ff;'>",
									"            <img src='data:image/png;base64,{{inputImage}}' style='max-width: 400px; height: auto;'/>",
									"        </div>",
									"        <p><em>Original image that will be processed</em></p>",
									"        <p>‚è≥ Processing... Check the response tab after execution.</p>",
									"    </div>`;",
									"    ",
									"    pm.visualizer.set(inputTemplate, { ",
									"        inputImage: requestBody.image_base64,",
									"        message: requestBody.message",
									"    });",
									"    ",
									"    console.log('üì§ Input image loaded for visualization');",
									"} else {",
									"    console.log('‚ö†Ô∏è No input image found in request body');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Paint simulation request processed', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('response');",
									"});",
									"",
									"// Get input data for comparison",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"const inputImage = requestBody.image_base64 || '';",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.image_data) {",
									"        console.log('üñºÔ∏è Simulation successful! Image returned.');",
									"        console.log('üìè Result image size:', Math.round(response.image_data.length / 1024), 'KB');",
									"        console.log('üìè Input image size:', Math.round(inputImage.length / 1024), 'KB');",
									"        ",
									"        // Display both input and output images for comparison",
									"        let template = `",
									"        <div style='text-align: center; font-family: Arial;'>",
									"            <h2>üé® Paint Simulation - Before & After</h2>",
									"            <p><strong>AI Response:</strong> {{responseText}}</p>",
									"            ",
									"            <div style='display: flex; justify-content: space-around; flex-wrap: wrap; margin: 20px 0;'>",
									"                <div style='flex: 1; min-width: 300px; margin: 10px;'>",
									"                    <h3>üì§ Input Image</h3>",
									"                    <div style='border: 2px solid #007acc; padding: 10px; background: #f0f8ff;'>",
									"                        <img src='data:image/png;base64,{{inputImage}}' style='max-width: 100%; height: auto;'/>",
									"                    </div>",
									"                    <p><em>Original image</em></p>",
									"                </div>",
									"                ",
									"                <div style='flex: 1; min-width: 300px; margin: 10px;'>",
									"                    <h3>üé® Simulated Result</h3>",
									"                    <div style='border: 2px solid #28a745; padding: 10px; background: #f8fff8;'>",
									"                        <img src='data:image/png;base64,{{outputImage}}' style='max-width: 100%; height: auto;'/>",
									"                    </div>",
									"                    <p><em>After paint simulation</em></p>",
									"                </div>",
									"            </div>",
									"            ",
									"            <div style='margin-top: 20px; padding: 15px; background: #f9f9f9; border-radius: 5px;'>",
									"                <h4>üìä Comparison Details</h4>",
									"                <p><strong>Message:</strong> {{message}}</p>",
									"                <p><strong>Input Size:</strong> {{inputSize}} KB</p>",
									"                <p><strong>Output Size:</strong> {{outputSize}} KB</p>",
									"            </div>",
									"        </div>`;",
									"        ",
									"        pm.visualizer.set(template, { ",
									"            inputImage: inputImage,",
									"            outputImage: response.image_data,",
									"            responseText: response.response,",
									"            message: requestBody.message,",
									"            inputSize: Math.round(inputImage.length / 1024),",
									"            outputSize: Math.round(response.image_data.length / 1024)",
									"        });",
									"    } else {",
									"        console.log('‚ö†Ô∏è No image returned in simulation');",
									"        ",
									"        // Show input image and response even without output image",
									"        let template = `",
									"        <div style='text-align: center; font-family: Arial;'>",
									"            <h2>üì§ Input Image & AI Response</h2>",
									"            <p><strong>AI Response:</strong> {{responseText}}</p>",
									"            ",
									"            <div style='border: 2px solid #007acc; padding: 10px; margin: 20px 0; background: #f0f8ff;'>",
									"                <h3>üì§ Input Image</h3>",
									"                <img src='data:image/png;base64,{{inputImage}}' style='max-width: 100%; height: auto;'/>",
									"            </div>",
									"            ",
									"            <div style='margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 5px;'>",
									"                <p>‚ö†Ô∏è No simulation image was generated</p>",
									"            </div>",
									"        </div>`;",
									"        ",
									"        pm.visualizer.set(template, { ",
									"            inputImage: inputImage,",
									"            responseText: response.response",
									"        });",
									"    }",
									"    console.log('ü§ñ Response:', response.response);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Voc√™ pode simular a Suvinil Vermelho Paix√£o no meu quarto?\",\n  \"session_uuid\": null,\n  \"image_base64\": \"\"\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Test paint simulation with a sample image (1x1 pixel PNG for testing). Replace image_base64 with real image data."
					},
					"response": []
				}
			],
			"description": "AI-powered paint recommendation endpoints with conversation persistence and image simulation"
		},
		{
			"name": "AI Service Extra Endpoints",
			"item": [
				{
					"name": "AI Enrichment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/admin/enrich/all?batch_size=10",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"enrich",
								"all"
							],
							"query": [
								{
									"key": "batch_size",
									"value": "10"
								}
							]
						},
						"description": "Start a new conversation asking for bedroom paint recommendations. Uses automatic session detection."
					},
					"response": []
				},
				{
					"name": "Embedding Populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Follow-up successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üîÑ Follow-up response:', response.response.substring(0, 100) + '...');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Essa verde, me d√™ detalhes!\",\n  \"session_uuid\": \"{{session_uuid}}\"\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/admin/embeddings/populate",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"embeddings",
								"populate"
							]
						},
						"description": "Follow-up question about premium paint option using the same session"
					},
					"response": []
				}
			],
			"description": "AI-powered paint recommendation endpoints with conversation persistence and image simulation"
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Get User Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Sessions retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('sessions');",
									"    pm.expect(response).to.have.property('total_sessions');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üìä Total sessions:', response.total_sessions);",
									"    if (response.sessions.length > 0) {",
									"        console.log('üìù Latest session preview:', response.sessions[0].preview);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ai_base_url}}/api/v1/chat/sessions",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"chat",
								"sessions"
							]
						},
						"description": "Get all chat sessions for the current user"
					},
					"response": []
				},
				{
					"name": "Reset Chat Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Session reset successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üîÑ Session reset:', response.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{session_uuid}}\""
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/chat/reset",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"chat",
								"reset"
							]
						},
						"description": "Reset a specific chat session (clears conversation memory)"
					},
					"response": []
				}
			],
			"description": "Session management endpoints for conversation persistence"
		},
		{
			"name": "Direct Search & Filter",
			"item": [
				{
					"name": "Search Paints - Blue Colors",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"azul\",\n  \"limit\": 5\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/search",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"search"
							]
						},
						"description": "Direct semantic search for blue paint products using Portuguese terms"
					},
					"response": []
				},
				{
					"name": "Filter - Premium Internal Paints",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"environment\": \"interno\",\n  \"product_line\": \"Premium\",\n  \"features\": [\"lav√°vel\", \"antimofo\"],\n  \"limit\": 10\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/filter",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"filter"
							]
						},
						"description": "Filter paints by specific criteria using Portuguese terms"
					},
					"response": []
				},
				{
					"name": "Filter - External Paints",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"environment\": \"externo\",\n  \"finish_type\": \"semi-brilho\",\n  \"limit\": 5\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/filter",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"filter"
							]
						},
						"description": "Filter external paints with semi-gloss finish"
					},
					"response": []
				}
			],
			"description": "Direct search and filter endpoints (without AI conversation)"
		},
		{
			"name": "System Health",
			"item": [
				{
					"name": "API Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API Service is healthy', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('healthy');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ API Service is healthy');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base_url}}/health",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API service health status"
					},
					"response": []
				},
				{
					"name": "AI Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('AI Service is healthy', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ AI Service is healthy');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ai_base_url}}/health",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check AI service health status"
					},
					"response": []
				},
				{
					"name": "AI Service Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('AI Service status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('service');",
									"    pm.expect(response).to.have.property('capabilities');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üöÄ Service:', response.service);",
									"    console.log('‚ö° Capabilities:', response.capabilities.join(', '));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ai_base_url}}/api/v1/status",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						},
						"description": "Get AI service detailed status and capabilities"
					},
					"response": []
				}
			],
			"description": "Health check endpoints for system monitoring"
		},
		{
			"name": "Conversation Persistence Tests",
			"item": [
				{
					"name": "Test 1: Create Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save session for persistence test",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('persistence_test_session', response.session_uuid);",
									"    console.log('üß™ Persistence test session:', response.session_uuid);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"oi! Me recomende uma tinta lavavel para ambiente interno.\",\n  \"session_uuid\": null\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Start conversation for persistence testing"
					},
					"response": []
				},
				{
					"name": "Test 2: Continue Conversation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Qual a mais barata?\",\n  \"session_uuid\": \"{{persistence_test_session}}\"\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Continue conversation to test memory persistence"
					},
					"response": []
				},
				{
					"name": "Test 3: Reference Previous Context",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Qual das op√ß√µes que voc√™ sugeriu anteriormente tem melhor custo-benef√≠cio?\",\n  \"session_uuid\": \"{{persistence_test_session}}\"\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Test if AI remembers previous recommendations in same session"
					},
					"response": []
				},
				{
					"name": "Test 4: Auto Session Detection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Auto session detection works', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    // Should use existing session if session_uuid is null",
									"    pm.expect(response).to.have.property('session_uuid');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üîÑ Auto-detected session:', response.session_uuid);",
									"    console.log('ü§ñ Response:', response.response.substring(0, 100) + '...');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Voc√™ se lembra de mim? Est√°vamos falando sobre tintas para ambiente interno.\",\n  \"session_uuid\": null\n}"
						},
						"url": {
							"raw": "{{ai_base_url}}/api/v1/recommend",
							"host": [
								"{{ai_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"recommend"
							]
						},
						"description": "Test automatic session detection when session_uuid is null"
					},
					"response": []
				}
			],
			"description": "Comprehensive tests for conversation persistence and memory functionality"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Auto-set base URLs",
					"pm.collectionVariables.set('api_base_url', 'http://localhost:8000');",
					"pm.collectionVariables.set('ai_base_url', 'http://localhost:8001');"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "api_base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "ai_base_url",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "admin123",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "session_uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "kitchen_session_uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "persistence_test_session",
			"value": "",
			"type": "string"
		}
	]
}